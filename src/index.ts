import path from 'node:path';
import { readFile } from 'node:fs/promises';

// @ts-ignore
import { BLOCKCHAIN_IDS } from 'dkg.js/constants';

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';

import z from "zod";

import { exec } from 'node:child_process';
import { CustomDkgClient } from './custom-dkg-client.mjs';
import { KCMulti } from './kcmulti.mjs';
import { ethers } from 'ethers';

interface ExecResult {
  stdout: Buffer<ArrayBufferLike>;
  stderr: Buffer<ArrayBufferLike>;
}

const scriptsPath = path.join(__dirname, '..', 'scripts');
const pythonPath = path.join(scriptsPath, 'venv', 'bin', 'python');

const execAsync = (cmd: any, options: any): Promise<ExecResult> => {
  return new Promise((resolve, reject) => {
    exec(cmd, options, (err, stdout, stderr) => {
      if (err) return reject(err);
      resolve({ stdout, stderr });
    });
  });
};

const OT_NODE_HOSTNAME = 'https://v6-pegasus-node-03.origin-trail.network';
const OT_NODE_PORT = '8900';

const options = {
  epochsNum: 2,
  minimumNumberOfFinalizationConfirmations: 3,
  minimumNumberOfNodeReplications: 1,
};

const DkgClient = new CustomDkgClient({
  endpoint: OT_NODE_HOSTNAME,
  port: OT_NODE_PORT,
  blockchain: {
    name: BLOCKCHAIN_IDS.NEUROWEB_TESTNET,
    privateKey: process.env.PRIVATE_KEY,
  },
  maxNumberOfRetries: 300,
  frequency: 2,
  contentType: 'all',
  nodeApiVersion: '/v1',
});

const provider = new ethers.JsonRpcProvider(OT_NODE_HOSTNAME);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY!, provider);
const contract = new ethers.Contract(KCMulti.address, KCMulti.abi, wallet);
const server = new McpServer({
  name: "dextrail-intel-agent",
  version: "0.0.1",
});

async function publishToNode(content: any, options: any) {
  const {
    endpoint,
    port,
    authToken,
    datasetRoot,
    dataset,
    datasetSize,
    blockchain,
    hashFunctionId,
    minimumNumberOfNodeReplications,
    maxNumberOfRetries,
    frequency,
    epochsNum,
    tokenAmount,
    immutable,
    contentAssetStorageAddress,
    minimumNumberOfFinalizationConfirmations,
    payer,
  } = await DkgClient.validateAndProcess(content, options);

  const publicationResult = await DkgClient.publish({
    endpoint,
    port,
    authToken,
    datasetRoot,
    datasetSize,
    dataset,
    blockchain,
    hashFunctionId,
    minimumNumberOfNodeReplications,
    maxNumberOfRetries,
    frequency,
    tokenAmount,
    epochsNum,
  });
  if (publicationResult === null) {
    throw new Error("Failed to publish");
  }
  const {
    estimatedPublishingCost,
    publisherNodeIdentityId,
    publisherNodeR,
    publisherNodeVS,
    identityIds,
    r,
    vs,
    operationId,
    operationResult,
  } = publicationResult;

  return {
    publishOperationResult: operationResult,
    publishOperationId: operationId,
    datasetRoot,
    dataset,
    datasetSize,
    epochsNum,
    publisherNodeIdentityId,
    estimatedPublishingCost,
    blockchain,
    immutable,
    publisherNodeR,
    publisherNodeVS,
    identityIds,
    r,
    vs,
    contentAssetStorageAddress,
    minimumNumberOfFinalizationConfirmations,
    endpoint,
    port,
    authToken,
    maxNumberOfRetries,
    frequency,
    payer,
  };
}

function submitAsset<T>(
  asset: T
): Promise<any> {
  return publishToNode(asset, options);
}

server.tool(
  "getTokenInfos",
  "Fetches data about a token, notably its trading pairs",
  {
    tokenAddress: z.string(),
  },
  async ({ tokenAddress }) => {
    await execAsync(`${pythonPath} dexscreener_monitor.py --addresses ${tokenAddress} --once`, {
      cwd: scriptsPath,
      maxBuffer: 1024 * 1024 * 5,
    });

    const text = await readFile(path.join(scriptsPath, 'new_tokens_data.json'), 'utf-8');
    return {
      content: [
        {
          type: "text",
          text,
        },
      ],
    };
  }
);

server.tool(
  "analyzeToken",
  "Analyze the the token data generated by the getTokenInfos tool. It tries to determine whether this token is safe to trade or if it seems like it might be a rug pool. This tool will not work if it is called before `getTokenInfos`",
  async () => {
    await execAsync(`${pythonPath} token_analytics_excel.py`, {
      cwd: scriptsPath,
      maxBuffer: 1024 * 1024 * 5,
    });
    await execAsync(`${pythonPath} address_clustering_analyzer.py output/aggregated_timeline.json`, {
      cwd: scriptsPath,
      maxBuffer: 1024 * 1024 * 5,
    });
    const clusters = JSON.parse(await readFile(path.join(scriptsPath, 'output/address_clusters.json'), 'utf-8'));
    const { stdout } = await execAsync(`${pythonPath} analyze_cluster_balances.py`, {
      cwd: scriptsPath,
      maxBuffer: 1024 * 1024 * 5,
    });
    return {
      content: [
        {
          type: "text",
          text: JSON.stringify({
            clusters,
            summary: stdout,
          }),
        },
      ],
    };
  }
);

async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("DexTrail MCP Server running on Std I/O");
}

main().catch((error) => {
  console.error("Fatal error in main():", error);
  process.exit(1);
});
